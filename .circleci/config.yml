version: 2.1

executors:
  default:
    working_directory: ~/workspace
    docker:
      - image: cdec/minimal-serializer:dev-alpine

commands:
  build:
    parameters:
      id:
        type: string
      compiler:
        type: string
    steps:
      - checkout
      - run:
          name: Make build directory
          command: mkdir build_<< parameters.id >>
      - run:
          name: Create build files
          working_directory: build_<< parameters.id >>
          command: cmake .. -DCMAKE_CXX_COMPILER=<< parameters.compiler >>
      - run:
          name: Build binaries
          working_directory: build_<< parameters.id >>
          command: make
      - persist_to_workspace:
          root: "."
          paths:
            - "build_<< parameters.id >>"

  test:
    parameters:
      id:
        type: string
    steps:
      - attach_workspace:
          at: "."
      - run:
          name: Execute unit tests
          working_directory: build_<< parameters.id >>
          command: BOOST_TEST_LOGGER="JUNIT,,minimal_serializer_cpp_test_<< parameters.id >>_log.xml" ctest
      - run:
          name: Copy test log
          command: |
            mkdir -p ~/test-results/junit/
            cp build_<< parameters.id >>/minimal_serializer_cpp_test/minimal_serializer_cpp_test_<< parameters.id >>_log.xml ~/test-results/junit/
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

jobs:
  build_gpp:
    executor: default
    steps:
      - build:
          id: gpp
          compiler: g++

  build_clang:
    executor: default
    steps:
      - build:
          id: clang
          compiler: clang++

  test_gpp:
    executor: default
    steps:
      - test:
          id: gpp

  test_clang:
    executor: default
    steps:
      - test:
          id: clang

workflows:
  build_and_test:
    jobs:
      - build_gpp:
          filters:
            branches:
              only: master

      - build_clang:
          filters:
            branches:
              only: master

      - test_gpp:
          requires:
            - build_gpp
          filters:
            branches:
              only: master

      - test_clang:
          requires:
            - build_clang
          filters:
            branches:
              only: master
